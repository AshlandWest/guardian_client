{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/ash/Documents/Code/guardian_client/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\nimport React, { useState } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Provider } from \"react-redux\";\nimport AppNavigator from \"./src/navigation/AppNavigator\";\nimport { store } from \"./src/store\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  }\n});\n\nfunction loadResourcesAsync() {\n  return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Asset.loadAsync([require(\"./assets/images/robot-dev.png\"), require(\"./assets/images/robot-prod.png\")]), Font.loadAsync(_objectSpread({}, Ionicons.font, {\n            \"space-mono\": require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n          }))]));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nvar App = function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  var skipLoadingScreen = props.skipLoadingScreen;\n\n  if (!isLoadingComplete && !skipLoadingScreen) {\n    return React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(LinearGradient, {\n    colors: [\"#4c669f\", \"#3b5998\", \"#192f6a\"],\n    style: {\n      padding: 15,\n      alignItems: \"center\",\n      borderRadius: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, Platform.OS === \"ios\" && React.createElement(StatusBar, {\n    barStyle: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 37\n    }\n  }), React.createElement(AppNavigator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/ash/Documents/Code/guardian_client/App.js"],"names":["AppLoading","Asset","Font","React","useState","Ionicons","Provider","AppNavigator","store","LinearGradient","styles","StyleSheet","create","container","flex","backgroundColor","loadResourcesAsync","Promise","all","loadAsync","require","font","handleLoadingError","error","console","warn","handleFinishLoading","setLoadingComplete","App","props","isLoadingComplete","skipLoadingScreen","padding","alignItems","borderRadius","Platform","OS"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,YAAP;AACA,SAASC,KAAT;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf;;AAOA,SAAeC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQC,OAAO,CAACC,GAAR,CAAY,CAChBjB,KAAK,CAACkB,SAAN,CAAgB,CACdC,OAAO,iCADO,EAEdA,OAAO,kCAFO,CAAhB,CADgB,EAKhBlB,IAAI,CAACiB,SAAL,mBAEKd,QAAQ,CAACgB,IAFd;AAKE,0BAAcD,OAAO;AALvB,aALgB,CAAZ,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AAGjCC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD;;AAED,SAASG,mBAAT,CAA6BC,kBAA7B,EAAiD;AAC/CA,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK,EAAI;AAAA,kBAC6BzB,QAAQ,CAAC,KAAD,CADrC;AAAA;AAAA,MACZ0B,iBADY;AAAA,MACOH,kBADP;;AAAA,MAEXI,iBAFW,GAEWF,KAFX,CAEXE,iBAFW;;AAInB,MAAI,CAACD,iBAAD,IAAsB,CAACC,iBAA3B,EAA8C;AAC5C,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEf,kBADd;AAEE,MAAA,OAAO,EAAEM,kBAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMI,mBAAmB,CAACC,kBAAD,CAAzB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AACD,SACE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CADV;AAEE,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,UAAU,EAAE,QAA3B;AAAqCC,MAAAA,YAAY,EAAE;AAAnD,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE1B,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsB,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD5B,EAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CAJF,CADF;AAaD,CA1BD;;AA4BA,eAAeR,GAAf","sourcesContent":["import { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\nimport React, { useState } from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Provider } from \"react-redux\";\nimport AppNavigator from \"./src/navigation/AppNavigator\";\nimport { store } from \"Store\";\n\nimport { LinearGradient } from \"expo-linear-gradient\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  }\n});\n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    Asset.loadAsync([\n      require(\"./assets/images/robot-dev.png\"),\n      require(\"./assets/images/robot-prod.png\")\n    ]),\n    Font.loadAsync({\n      // This is the font that we are using for our tab bar\n      ...Ionicons.font,\n      // We include SpaceMono because we use it in HomeScreen.js. Feel free to\n      // remove this if you are not using it in your app\n      \"space-mono\": require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n    })\n  ]);\n}\n\nfunction handleLoadingError(error) {\n  // In this case, you might want to report the error to your error reporting\n  // service, for example Sentry\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nconst App = props => {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const { skipLoadingScreen } = props;\n\n  if (!isLoadingComplete && !skipLoadingScreen) {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  }\n  return (\n    <LinearGradient\n      colors={[\"#4c669f\", \"#3b5998\", \"#192f6a\"]}\n      style={{ padding: 15, alignItems: \"center\", borderRadius: 5 }}\n    >\n      <Provider store={store}>\n        <View style={styles.container}>\n          {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n          <AppNavigator />\n        </View>\n      </Provider>\n    </LinearGradient>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}